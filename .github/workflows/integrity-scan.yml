name: üîí Template Integrity Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  schedule:
    # Run daily at 2 AM UTC to catch any attribution removals
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  integrity-check:
    runs-on: ubuntu-latest
    name: Verify Template Attribution
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîç Check for required attribution
      id: attribution_check
      run: |
        echo "üîç Scanning for required attribution strings..."
        
        # Use Node.js for cross-platform compatibility
        node -e "
        const fs = require('fs');
        const path = require('path');
        
        const requiredStrings = [
          'Surya GS Chitti',
          'Template design by',
          'codechitti216',
          'Attribution required'
        ];
        
        let failedChecks = [];
        let foundFiles = {};
        
        function searchInDir(dir) {
          try {
            const files = fs.readdirSync(dir);
            for (const file of files) {
              if (['node_modules', '.git', 'dist'].includes(file)) continue;
              
              const fullPath = path.join(dir, file);
              const stat = fs.statSync(fullPath);
              
              if (stat.isDirectory()) {
                searchInDir(fullPath);
              } else if (/\.(js|jsx|ts|tsx|md|html|json)$/.test(file)) {
                const content = fs.readFileSync(fullPath, 'utf8');
                
                for (const str of requiredStrings) {
                  if (content.includes(str)) {
                    if (!foundFiles[str]) foundFiles[str] = [];
                    foundFiles[str].push(fullPath);
                  }
                }
              }
            }
          } catch (err) {
            // Ignore permission errors
          }
        }
        
        searchInDir('.');
        
        for (const str of requiredStrings) {
          if (foundFiles[str] && foundFiles[str].length > 0) {
            console.log('‚úÖ FOUND:', str, 'in', foundFiles[str].length, 'files');
          } else {
            console.log('‚ùå MISSING:', str);
            failedChecks.push(str);
          }
        }
        
        if (failedChecks.length === 0) {
          console.log('integrity_status=PASS');
        } else {
          console.log('integrity_status=FAIL');
          console.log('failed_checks=' + failedChecks.join(','));
          process.exit(1);
        }
        "
        
        # Check specific critical files
        CRITICAL_FILES=(
          "LICENSE.md"
          "package.json"
          "src/components/Layout.jsx"
          "index.html"
        )
        
        for file in "${CRITICAL_FILES[@]}"; do
          if [[ ! -f "$file" ]]; then
            FAILED_CHECKS+=("Missing file: $file")
            echo "‚ùå MISSING FILE: $file"
          else
            echo "‚úÖ FILE EXISTS: $file"
          fi
        done
        
        # Check meta tags in index.html using Node.js
        echo "üîç Checking meta tags in index.html..."
        node -e "
        const fs = require('fs');
        if (fs.existsSync('index.html')) {
          const content = fs.readFileSync('index.html', 'utf8');
          if (content.includes('template-author') && content.includes('Surya GS Chitti')) {
            console.log('‚úÖ FOUND: template-author meta tag with correct attribution');
          } else {
            console.log('‚ùå MISSING: template-author meta tag');
            process.exit(1);
          }
        } else {
          console.log('‚ùå MISSING: index.html file');
          process.exit(1);
        }
        "
        
        # Set outputs
        if [[ ${#FAILED_CHECKS[@]} -eq 0 ]]; then
          echo "integrity_status=PASS" >> $GITHUB_OUTPUT
          echo "‚úÖ All integrity checks passed!"
        else
          echo "integrity_status=FAIL" >> $GITHUB_OUTPUT
          echo "failed_checks=${FAILED_CHECKS[*]}" >> $GITHUB_OUTPUT
          echo "‚ùå Integrity check failed!"
          echo "Failed checks: ${FAILED_CHECKS[*]}"
        fi
        
    - name: üìä Build check (verify no build errors after attribution)
      if: steps.attribution_check.outputs.integrity_status == 'PASS'
      run: |
        if [[ -f "package.json" ]]; then
          npm ci
          npm run build
          echo "‚úÖ Build successful with attribution intact"
        fi
        
    - name: üö® Fail job if attribution missing
      if: steps.attribution_check.outputs.integrity_status == 'FAIL'
      run: |
        echo "::error::Template attribution requirements not met!"
        echo "::error::Failed checks: ${{ steps.attribution_check.outputs.failed_checks }}"
        echo ""
        echo "üîí TEMPLATE INTEGRITY VIOLATION DETECTED"
        echo ""
        echo "Required attribution has been removed or modified."
        echo "This violates the template license terms."
        echo ""
        echo "To fix this:"
        echo "1. Restore the original LICENSE.md file"
        echo "2. Ensure 'Template design by Surya GS Chitti' appears in footer"
        echo "3. Keep meta tag: <meta name=\"template-author\" content=\"Surya GS Chitti\" />"
        echo "4. Preserve copyright headers in source files"
        echo ""
        echo "For licensing questions: suryachitti216@gmail.com"
        exit 1
        
    - name: üìù Create issue on integrity failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          const title = 'üö® Template Integrity Violation Detected';
          const body = `## Attribution Integrity Check Failed
          
          The automated integrity scan detected that required template attribution has been removed or modified.
          
          **Failed Checks:**
          \`\`\`
          ${{ steps.attribution_check.outputs.failed_checks }}
          \`\`\`
          
          **Required Actions:**
          - [ ] Restore LICENSE.md with original attribution
          - [ ] Ensure footer contains "Template design by Surya GS Chitti"
          - [ ] Verify meta tag: \`<meta name="template-author" content="Surya GS Chitti" />\`
          - [ ] Preserve copyright headers in source files
          
          **License Violation Notice:**
          This template is provided under a Custom Attribution License. Removal of attribution violates the license terms and may result in DMCA takedown requests.
          
          For licensing questions, contact: suryachitti216@gmail.com
          
          ---
          *Auto-generated by Template Integrity Scanner*
          *Scan Time: ${{ github.run_id }} | ${{ github.sha }}*`;
          
          // Check if issue already exists
          const existingIssues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: 'template-integrity'
          });
          
          if (existingIssues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['template-integrity', 'license-violation', 'urgent']
            });
          }
